"""
Trigger Crawl Past Race IDs DAG

This DAG triggers the crawl_past_race_ids_dag for each year and month in the given list.

The DAG:
- Runs once a month
- Has 0 retries configured for error handling
- Uses the 'postgres_netkeiba' connection ID

The DAG performs the following tasks:
- Retrieves the latest race ID date from the database
- Generates a list of target years and months based on the latest race ID date
- Triggers the crawl_past_race_ids_dag for each year and month in the list
"""

import logging
import pendulum
from airflow.decorators import dag, task
from airflow.providers.postgres.hooks.postgres import PostgresHook
from airflow.operators.python import get_current_context
from airflow.api.common.trigger_dag import trigger_dag

logger = logging.getLogger(__name__)


@dag(
    dag_id="trigger_crawl_past_race_ids_dag",
    default_args={"retries": 0},
    description="Trigger Crawl Past Race IDs DAG",
    schedule_interval="@monthly",
    start_date=pendulum.datetime(2021, 1, 1, tz="UTC"),
    catchup=False,
    doc_md=__doc__,
    tags=["trigger"],
)
def trigger_crawl_past_race_ids() -> None:
    @task()
    def get_latest_race_id_date() -> int:
        """
        Get the latest race ID date from the race_ids table.

        This task queries the database to get the latest race ID date from the race_ids table.
        It returns the result as an integer.

        Returns:
            int: The latest race ID date
        """
        hook = PostgresHook(postgres_conn_id="postgres_netkeiba")
        conn = hook.get_conn()
        cursor = conn.cursor()

        query = "SELECT kaisai_date FROM race_ids ORDER BY kaisai_date DESC LIMIT 1"

        cursor.execute(query)
        result: int = cursor.fetchone()[0]

        cursor.close()
        conn.close()

        return result

    @task()
    def get_target_years_and_months(latest_date: int) -> list[tuple[int, int]]:
        """
        Get a list of target years and months to trigger the crawl_past_race_ids_dag.

        This task takes the latest race ID date as an argument and returns a list of target years and months.
        The list is generated by iterating from the start date to the end date, which is the current date minus one month.
        The start date is set to the first day of the month of the latest race ID date.
        The end date is set to the first day of the previous month of the current date.

        Args:
            latest_date (int): The latest race ID date

        Returns:
            list[tuple[int, int]]: A list of target years and months
        """
        date_str = str(latest_date)
        year = int(date_str[:4])
        month = int(date_str[4:6])
        day = int(date_str[6:])
        start_date = pendulum.date(year, month, day)

        now = pendulum.now()
        end_date = now.subtract(months=1)

        result = []
        current = start_date.replace(day=1)

        while (current.year < end_date.year) or (
            current.year == end_date.year and current.month <= end_date.month
        ):
            result.append((current.year, current.month))
            current = current.add(months=1)

        return result

    @task()
    def create_trigger_tasks(years_and_months: list[tuple[int, int]]) -> None:
        """
        Trigger the crawl_past_race_ids_dag for each year and month in the given list.

        This task takes a list of target years and months as an argument and triggers the crawl_past_race_ids_dag for each year and month.
        The run_id is set to a string that includes the dag_run.run_id and the year and month, and the conf is set to a dict with the year, month, and dry_run set to False.

        Args:
            years_and_months (list[tuple[int, int]]): A list of target years and months

        Returns:
            None
        """
        context = get_current_context()
        dag_run = context["dag_run"]

        for year, month in years_and_months:
            trigger_dag(
                dag_id="crawl_past_race_ids_dag",
                run_id=f"triggered_by_{dag_run.run_id}_{year}_{month}",
                conf={"year": year, "month": month, "dry_run": False},
                replace_microseconds=False,
            )
            logger.info(f"Triggered DAG for year: {year}, month: {month}")

    latest_date = get_latest_race_id_date()
    target_years_and_months = get_target_years_and_months(latest_date)
    create_trigger_tasks(target_years_and_months)


trigger_crawl_past_race_ids()
